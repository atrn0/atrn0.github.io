<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CAMPHOR- Advent Calendar on atrn0</title><link>https://atrn0.github.io/tags/camphor-advent-calendar/</link><description>Recent content in CAMPHOR- Advent Calendar on atrn0</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Wed, 15 Dec 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://atrn0.github.io/tags/camphor-advent-calendar/index.xml" rel="self" type="application/rss+xml"/><item><title>自作ラムダ計算インタプリタで階乗を計算する</title><link>https://atrn0.github.io/p/lambda-interpreter/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0900</pubDate><guid>https://atrn0.github.io/p/lambda-interpreter/</guid><description>この記事は、CAMPHOR- Advent Calendar 2021 の15日目の記事です。
ラムダ計算とは、関数定義と関数の適用からなるプログラミング言語で、チューリング完全な計算モデルです。以前ラムダ計算のインタプリタをOCamlで実装しました。この記事ではそのインタプリタでnの階乗を求めるまでの道のりを書きます。
実装したインタプリタは以下にあります。
https://github.com/atrn0/lambda
動機 僕が所属している研究室では、B4の前期にTypes and Programming Languagesの輪読と数学演習、OCamlとCoqの演習をやります。OCaml演習では基本的にB3でやるインタプリタ実験の続きをやります。
OCaml 演習は，実験3SWの続きをやってみてください． &amp;hellip; あとは，OCaml で面白いソフトウェア（できれば言語処理系？）を実装してみるのもよいかもしれません．
プログラミング言語処理系という授業を落として再履修していた僕は、この授業の課題としてインタプリタ実験の続きはどうせやるので、「面白いソフトウェア（できれば言語処理系？）」も実装することにしました。題材の言語は、TaPLの輪講でちょうど読んでいて、性質が面白いかつ処理系の実装が簡単そうな型無しラムダ計算を選びました。
(型無し)ラムダ計算 複雑なプログラミング言語が、その本質的な仕組みを表現できる核となる計算モデルと、その核に変換される派生形式の集まりとして定式化できるという考え方があります。その一つの計算モデルがラムダ計算で、Lisp, Scheme, MLなどの言語の核となる計算モデルです。他にも$\pi$計算やオブジェクト計算などの計算モデルがあり、それぞれメッセージベースの並行処理言語、オブジェクト指向言語の核となる機能を持っています。これらの計算モデルはそれ自体で計算が記述できる単純なプログラミング言語であるのと同時に、数学的対象としてもみなせるので、一般的なプログラミング言語の仕様の記述や、設計、実装、研究において広く使われています。
ラムダ計算では全ての計算が関数の定義と適用に帰着されます。実装したインタプリタで扱える型無しラムダ計算の文法と意味論(プログラムがどう評価されるか)を見ていきます。
文法(シンタックス) プログラムの文法は以下です。
t ::= | x (変数) | \x. t (関数定義) | t t (関数適用) これはBNF風の記法で書いていて、tはxまたは\x. tまたはt tであるという意味です。右辺のtは左辺のtで、関数定義のxは任意の変数で置き換えることができます。それと、カッコは適当につけることができます。
例えば、以下のようなプログラムが許容されます。
y: 1つの変数y \y. y: yを引数として受け取り、yを返す関数(恒等関数) f x: 引数xを関数fに適用する \x. f x: xを引数として受け取り、fに適用して返す関数 \x. (\x. x) x: xを引数として受け取り、恒等関数に適用して返す関数 このように、基本的に関数の定義と適用のみを使ってプログラムを書きます。
また、関数適用は左結合で、関数適用は関数定義より優先されます。つまり、
x y zというプログラムは(x y) zと等価 (左結合) \x.</description></item><item><title>学生起業して思ったこと</title><link>https://atrn0.github.io/p/starting-business-as-a-student/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0900</pubDate><guid>https://atrn0.github.io/p/starting-business-as-a-student/</guid><description>この記事は、CAMPHOR- Advent Calendar 2020 の10日目の記事です。
こんにちは、あたらんです。大学では情報学を学んでいます。
何をしていたのか 5月から9月まで、札幌ToGoという札幌でテイクアウトを予約してオンライン決済できるサービスを運営していました。4月に高校の友人に誘われて開発に参加しました。営業していたレストランの関係から5月の初めにリリースすることが決まっていましたが、僕が参加したときは要件や仕様すらしっかり決まっておらず、なかなかに炎上プロジェクトでした。が、ビジネスとして0からサービスを開発したことがなかったこともあって、「やりきったらインターンの選考とかでアピールできそう」という軽い気持ちで参加することにしました。
サービスの概要
サービス内容はマクドナルドのモバイルオーダーに近いと思います。まず、ユーザーは札幌ToGoのサイトを訪れ、検索ボックスやマップからテイクアウトできるお店やメニューを探し、カートに追加します。受け取りたい時間を選んで決済を行うとお店に通知され、お店が注文を承認するとユーザーに承認されたことと受け取り時間、受け取り場所が通知されます。ユーザーは受け取り時間にお店で商品を受け取ります。お店がユーザーに商品の受け渡しを完了すると、代金が送金されます。決済の部分はStripeを使用し、お店の通知や承認などのインターフェースはLINE bot、ユーザーへの通知はメールを使いました。
5月6月はこの活動がとても楽しく、前期は10単位ぐらい落としました。テイクアウトがタイムリーな話題だったこともあり、テレビの取材を受けたり接点のない人たちが使ってレビューしてくれていたりしてとても刺激的な経験でした。
次のサービス ただ、夏休みに僕がインターンに行っていて開発にほとんど参加できず、UI/UXなどの改善があまり行えませんでした。注文数が伸び悩んでいることや、menuやUber Eatsなどの似たようなサービスが札幌に進出することもあり、新しいサービスをやろうという話になりました。
いくつかの新しいビシネスモデルを考え、需要や実現可能性を検証しました。例えば、支払い形態を変えてみて(サブスクリプションなど)2週間ほどコワーキングスペースの会員に使ってみてもらい意見を集めたり、企業向けのサービスにして社食として使ってもらうことを考えたりしました。しかし、実際にサービスを開発してリリースすることはできませんでした。
コミュニケーション 新しいアイディアを形にできなかった理由はいくつかあると思います。法律の問題や競合との兼ね合い、お金の問題、etc&amp;hellip; しかし、最も大きかったのは チーム内のコミュニケーションの不足 だと思っています。Discordで定期的にミーティングはしていましたが、知らない間に意思決定が進んでいたり、意思決定の経緯が分からないことがしばしばありました。これによって新しいアイディアに対するチーム内での認識の齟齬や、サービス内容に対する共感の不足がありました。最終的に、どうやってチームに合ったビジネスモデルを見つけるかオフラインで話し合いました。そこでよく話し合ったところ、「サービス内容はそれほど重要ではなく、起業によって社会に大きい影響を与えたい」、「共感する課題を解決できるサービスを作りたい」、「面白い技術に触れたい」など、それぞれこの活動に参加している目的が全く違いました。結局一旦解散することになり、札幌ToGoも閉じることにしました。
さいごに 結局「方向性の違い」というよくある解散理由でしたが、始めからしっかりコミュニケーションをとっていればもっと本質的な議論ができ、チームに合ったビジネスモデルも見つかったかもしれないなと思っています。もしくは、サービスへの共感とか深く考えずにとりあえずやってみる精神が大事なのかもしれません。札幌ToGoはそうやって開発していました。なにはともあれ、開発経験という意味でもいい経験になったし、自分が本当にやりたいことは何なのか見つめ直すいい機会になったと思います。</description></item></channel></rss>